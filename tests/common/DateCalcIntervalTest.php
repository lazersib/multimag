<?php

require_once '/usr/share/multimag/common/datecalcinterval.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-27 at 18:59:59.
 */
class DateCalcIntervalTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var DateCalcInterval
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new DateCalcInterval;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers DateCalcInterval::setBaseDate
	 * @todo   Implement testSetBaseDate().
	 */
	public function testSetBaseDate() {
		$this->object->setBaseDate(1000);
		$this->assertEquals(1000, $this->object->base_time);
	}

	/**
	 * @covers DateCalcInterval::calcXDaysBack
	 * @dataProvider providerXDaysBack 
	 */
	public function testCalcXDaysBack($a, $b, $c, $d) {
		$this->object->setBaseDate($a);
		$this->object->calcXDaysBack($b);
		$this->assertEquals($c, $this->object->start);
		$this->assertEquals($d, $this->object->end);
	}

	/**
	 * @covers DateCalcInterval::calcXMonthsBack
	 * @dataProvider providerXMonthsBack 
	 */
	public function testCalcXMonthsBack($a, $b, $c, $d) {
		$this->object->setBaseDate(strtotime($a));
		$this->object->calcXMonthsBack($b);
		$this->assertEquals($c, date("Y-m-d H:i:s", $this->object->start));
		$this->assertEquals($d, date("Y-m-d H:i:s", $this->object->end));
	}

	/**
	 * @covers DateCalcInterval::calcXYearsBack
	 * @dataProvider providerXYearsBack 
	 */
	public function testCalcXYearsBack($a, $b, $c, $d) {
		$this->object->setBaseDate(strtotime($a));
		$this->object->calcXYearsBack($b);
		$this->assertEquals($c, date("Y-m-d H:i:s", $this->object->start));
		$this->assertEquals($d, date("Y-m-d H:i:s", $this->object->end));
	}
	
	/**
	 * @covers DateCalcInterval::calcPrevMonth
	 * @dataProvider providerPrevMonth 
	 */
	public function testCalcPrevMonth($a, $b, $c) {
		$this->object->setBaseDate(strtotime($a));
		$this->object->calcPrevMonth();
		$this->assertEquals($b, date("Y-m-d H:i:s", $this->object->start));
		$this->assertEquals($c, date("Y-m-d H:i:s", $this->object->end));
	}
	
	/**
	 * @covers DateCalcInterval::calcPrevQuarter
	 * @dataProvider providerPrevQuarter
	 */
	public function testCalcPrevQuarter($a, $b, $c) {
		$this->object->setBaseDate(strtotime($a));
		$this->object->calcPrevQuarter();
		$this->assertEquals($b, date("Y-m-d H:i:s", $this->object->start));
		$this->assertEquals($c, date("Y-m-d H:i:s", $this->object->end));
	}
	
	/**
	 * @covers DateCalcInterval::calcPrevHalfyear
	 * @dataProvider providerPrevHalfyear
	 */
	public function testCalcPrevHalfyear($a, $b, $c) {
		$this->object->setBaseDate(strtotime($a));
		$this->object->calcPrevHalfyear();
		$this->assertEquals($b, date("Y-m-d H:i:s", $this->object->start));
		$this->assertEquals($c, date("Y-m-d H:i:s", $this->object->end));
	}
	
	/**
	 * @covers DateCalcInterval::calcPrevYear
	 * @dataProvider providerPrevYear
	 */
	public function testCalcPrevYear($a, $b, $c) {
		$this->object->setBaseDate(strtotime($a));
		$this->object->calcPrevYear();
		$this->assertEquals($b, date("Y-m-d H:i:s", $this->object->start));
		$this->assertEquals($c, date("Y-m-d H:i:s", $this->object->end));
	}

	public function providerXDaysBack() {
		$time = time();
		return array(
		    array($time, 5, $time - 60 * 60 * 24 * 5, $time),
		    array($time, 35, $time - 60 * 60 * 24 * 35, $time)
		);
	}

	public function providerXMonthsBack() {
		return array(
		    array("2014-05-05 01:02:03", 0, "2014-05-05 01:02:03", "2014-05-05 01:02:03"),
		    array("2014-05-05 01:02:03", 1, "2014-04-05 01:02:03", "2014-05-05 01:02:03"),
		    array("2013-03-30 01:02:03", 1, "2013-02-28 01:02:03", "2013-03-30 01:02:03"),
		    array("2000-03-30 01:02:03", 1, "2000-02-29 01:02:03", "2000-03-30 01:02:03"),
		    array("2000-05-31 01:02:03", 1, "2000-04-30 01:02:03", "2000-05-31 01:02:03"),
		    array("2014-01-05 01:02:03", 1, "2013-12-05 01:02:03", "2014-01-05 01:02:03"),
		    array("2014-01-31 01:02:03", 14, "2012-11-30 01:02:03", "2014-01-31 01:02:03"),
		);
	}

	public function providerXYearsBack() {
		return array(
		    array("2014-05-05 01:02:03", 0, "2014-05-05 01:02:03", "2014-05-05 01:02:03"),
		    array("2014-01-31 01:02:03", 14, "2000-01-31 01:02:03", "2014-01-31 01:02:03"),
		);
	}
	
	public function providerPrevMonth() {
		return array(
		    array("2014-05-05 01:02:03", "2014-04-01 00:00:00", "2014-04-30 23:59:59"),
		    array("2014-02-25 01:02:03", "2014-01-01 00:00:00", "2014-01-31 23:59:59"),
		    array("2000-03-25 01:02:03", "2000-02-01 00:00:00", "2000-02-29 23:59:59"),
		    array("2001-03-25 01:02:03", "2001-02-01 00:00:00", "2001-02-28 23:59:59"),
		    array("2001-01-25 01:02:03", "2000-12-01 00:00:00", "2000-12-31 23:59:59"),
		);
	}
	
	public function providerPrevQuarter() {
		return array(
		    array("2014-12-05 01:02:03", "2014-07-01 00:00:00", "2014-09-30 23:59:59"),
		    array("2014-11-12 01:02:03", "2014-07-01 00:00:00", "2014-09-30 23:59:59"),
		    array("2014-10-25 01:02:03", "2014-07-01 00:00:00", "2014-09-30 23:59:59"),
		    array("2014-09-25 01:02:03", "2014-04-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-07-25 01:02:03", "2014-04-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-05-25 01:02:03", "2014-01-01 00:00:00", "2014-03-31 23:59:59"),
		    array("2014-01-31 01:02:03", "2013-10-01 00:00:00", "2013-12-31 23:59:59"),
		);
	}
	
	public function providerPrevHalfyear() {
		return array(
		    array("2014-12-05 01:02:03", "2014-01-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-11-12 01:02:03", "2014-01-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-10-25 01:02:03", "2014-01-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-09-20 01:02:03", "2014-01-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-08-25 01:02:03", "2014-01-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-07-25 01:02:03", "2014-01-01 00:00:00", "2014-06-30 23:59:59"),
		    array("2014-06-15 01:02:03", "2013-07-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-05-25 01:02:03", "2013-07-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-04-05 01:02:03", "2013-07-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-03-25 01:02:03", "2013-07-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-02-27 01:02:03", "2013-07-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-01-15 01:02:03", "2013-07-01 00:00:00", "2013-12-31 23:59:59"),
		);
	}
	
	public function providerPrevYear() {
		return array(
		    array("2014-12-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-11-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-10-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-09-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-08-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-07-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-06-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-05-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-04-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-03-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-02-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		    array("2014-01-05 01:02:03", "2013-01-01 00:00:00", "2013-12-31 23:59:59"),
		);
	}

}
